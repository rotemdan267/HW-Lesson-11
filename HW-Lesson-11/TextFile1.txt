הסבר את רמת ההרשאה:

private - שדה/פונקציה המוגדרת כך תהיה זמינה ומוכרת רק לאותה מחלקה שבה הוגדרה

public - שדה/פונקציה/מחלקה המוגדרת כך תהיה זמינה ומוכרת בכל מקום בפרויקט שלנו. ובנוסף, יש
אפשרות להשתמש בה גם מחוץ לפרויקט שלנו, ע"י הוספה שלה כ-refernce 
בפרויקט אחר

protected - שדה/פונקציה המוגדרת כך תהיה זמינה ומוכרת רק לאותה מחלקה שבה הוגדרה
ולמחלקות היורשות ממנה

internal - שדה/פונקציה/מחלקה המוגדרת כך תהיה זמינה ומוכרת רק לפרויקט בו הוגדרה

------------------------------------------------------------------------------------------

איזה חלק בOOP רמות הגישה עוזרות לנו לממש? ואיך בדיוק?

encapsulation
רמות הגישה מאפשרות לנו לבחור למנוע גישה משדות/פונקציות/מחלקות מסוימות ובכך לשלוט טוב יותר
על הנעשה באותם מחלקות/שדות... ולמנוע ממי שיבוא אחרינו לקוד או מעצמנו להשתמש באותם שדות
בצורה לא רצויה.

------------------------------------------------------------------------------------------

מהו הרמת גישה הדיפולטיבית של:
מחלקה - internal
שדה או פונקציה במחלקה - private
enums ו-interface - public

------------------------------------------------------------------------------------------

הסבר מה זה static.

הגדרה של שדה/פונקציה במחלקה מסוימת כך שלא יהיו תלויי-מופע אלא קיימים בפני עצמם במחלקה

------------------------------------------------------------------------------------------

מה עוזר לי כשאני מוסיף את המילה static בהצהרה על פונקציה\שדה?

איזה סוג שדות\פונקציות אנו נצהיר עליהם כstatic?

נצהיר על שדות כפונקציות כאשר הם אמורים להכיל מידע שלא תלוי במופע מסוים במחלקה אלא משותף
לכל המחלקה שלנו. לדוגמא, במחלקת "תלמידים" אני רוצה לשמור בשדה כמה תלמידים קיימים. אין
היגיון שאצל כל תלמיד בנפרד יהיה שדה שסופר כמה תלמידים יש, כי אם כך, כל פעם שיתווסף תלמיד
יהיה צורך לעבור על כל התלמידים ולעדכן את השדה בכל אחד מהם. לכן, במקום זאת, נגדיר שדה אחד
עבור כל המחלקה שלא קשור לאף תלמיד בנפרד

